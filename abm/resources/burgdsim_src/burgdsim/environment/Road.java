package burgdsim.environment;
import java.util.ArrayList;
import java.util.List;

import burgdsim.main.GlobalVars;

/** Represents road objects.
 * 
 * @author Nick Malleson
 */
public class Road implements FixedGeography { 
	// (FixedGeography guarantees this class has get/setCoord methods, these are used in 
	// EnvironmentFactory.readShapefile to set an object's centroid, not particularly useful for a road though!)


	private static final long serialVersionUID = 1L;		 
	private String identifier; 	// An identifier which can be used to link Roads (in a spatial GIS) with Edges
								//(in a Network). Should be found using the column name in a GIS table (e.g. TOID
	private int id;	// Must be unique, either an auto-increment number or the hash of the identifier
	private static int UniqueRoadID=0;
	
	transient private ArrayList<Junction> junctions; 	// The junctions at either end of the road
	private Coord coord;
	
	
	transient private NetworkEdge<Junction> edge ; // The NetworkEdge which represents this Road in the roadNetwork
	
	// These determine whether or not the the road can be traversed on foot and/or by car.
	private String access; // To be used by ShapefileLoader, should contain string of words separated by spaces
	private List<String> accessibility; // access String should be parsed into this list (see initialise()).
	
	private boolean majorRoad = false;
	
	public Road() {
		this.junctions = new ArrayList<Junction>();
		this.id=UniqueRoadID++;
	}
	
	public Road(Coord c) {
		this.coord = c;
		this.junctions = new ArrayList<Junction>();
		this.id=UniqueRoadID++;
	}
	
	/**
	 * This should be called once this Road object has been created to perform some extra initialisation
	 * (e.g. setting the accessibility methods available to this Road).
	 */
	public void initialise() {
		// Parse the access string and work out which accessibility methods can be used to travel this Road
		if (this.access!=null) { // Could be null because not using accessibility in GRID environment for example
			this.accessibility = new ArrayList<String>();
			for (String word:this.access.split(" ")){
				if (word.equals(GlobalVars.TRANSPORT_PARAMS.MAJOR_ROAD)) {
					// Special case: 'majorRoad' isn't a type of access, means the road is quick for car drivers
					this.majorRoad=true;
				}
				else {
					// Otherwise just add the accessibility type to the list
					this.accessibility.add(word);					
				}
			}
		}		
	}
	
	/**
	 * Sets the access methods which can be used to get down this road (e.g. "walk", "car" etc).
	 * <p> 
	 * Different roads can be accessed differently depending on the transportation available to the agents.
	 * The 'access' variable can be used by ShapefileLoader to set the different accessibility methods, but it
	 * must be parsed and the accessibility list populated in initialise() (once the Road has been created).
	 * E.g. the String "walk car" indicates agents can either walk or drive down the Road. Note that, ultimately,
	 * Roads might also form parts of transport networks (e.g. busses) but this is done by changing the edges
	 * in the roadNetwork directly (in EnvironmentFactory.createTransportNetworks) and does not affect Road objects.
	 * @param access A string indicating how this road can be traversed, separated by spaces.
	 */
	public void setAccess(String access){
		this.access = access;
	}

	public boolean isMajorRoad() {
		return this.majorRoad;
	}
	
	/**
	 * Get the accessibility methods (not including public transport) which agents can use to travel
	 * along this road.
	 * @return
	 * @see setAccess
	 */
	public List<String> getAccessibility() {
		return this.accessibility;
	}
	
	public String toString() {
//		return "road: "+this.identifier+"("+this.id+") with accessibility: "+this.getAccessibility()+
//			(this.isMajorRoad() ? " is major road." : ".");
		return "road: "+this.identifier+"("+this.id+")";
	}

	public int getId() {
		return this.id;
	}
	
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Get a unique identifier for this Road. Not the same as ID (which is an autogenerated field common
	 * to every agent used in the model), this identifier is used to link road features in a GIS with
	 * Edges added to the RoadNetwork (a repast Network Projection).
	 * @return the identifier for this Road.
	 * @throws NoIdentifierException if the identifier has not been set correctly. This might occur if
	 * the roads are not initialised correctly (e.g. there is no attribute called 'identifier' present in
	 * the shapefile used to create this Road).
	 */
	public String getIdentifier()  {
		if (identifier=="" || identifier == null) {
			System.err.println("Road: error, the identifier field for this road has not been initialised." +
					"\n\tIf reading in a shapefile please make sure there is a string collumn called 'identifier' which is" +
					" unique to each feature");
		}
		return identifier;
	}

	public void setIdentifier(String identifier) {
		this.identifier = identifier;
		// Because this road definitely has a unique identifier (the TOID), also set it's uniqueID (otherwise
		// this is just an auto-increment number).
		this.id = this.identifier.hashCode();
	}
	
	/**
	 * Used to tell this Road who it's Junctions (endpoints) are.
	 * @param j the Junction at either end of this Road.
	 */
	public void addJunction(Junction j) {
		if (this.junctions.size()==2) {
			System.err.println("Road: Error: this Road object already has two Junctions.");
		}
		this.junctions.add(j);
	}

	public ArrayList<Junction> getJunctions() {
		if (this.junctions.size()!=2) {
			System.err.println("Road: Error: This Road does not have two Junctions");
		}
		return this.junctions;
	}

	/**
	 * @return the coord
	 */
	public Coord getCoords() {
		return coord;
	}

	/**
	 * @param coord the coord to set
	 */
	public void setCoords(Coord coord) {
		this.coord = coord;
	}
	
	

	/**
	 * Get the NetworkEdge which represents this Road object in the roadNetwork
	 * @return the edge
	 */
	public NetworkEdge<Junction> getEdge() {
		return edge;
	}

	/**
	 * @param edge the edge to set
	 */
	public void setEdge(NetworkEdge<Junction> edge) {
		this.edge = edge;
	}

	/**
	 * Checks to see if passed object is a Road and if the unique id's are equal
	 */
	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof Road))
			return false;
		Road b = (Road) obj;
		return this.id==b.id;
	}

	/**
	 * Return this Road'sunique id number.
	 */
	@Override
	public int hashCode() {
		return this.id;
	}
}


